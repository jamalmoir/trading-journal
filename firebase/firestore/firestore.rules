rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		// Secure by default
		match /{document=**} {
			allow read: if false;
			allow write: if false;
		}

		match /journals/{journalId} {
			function journalBelongsToUser() {
				return 	request.auth.uid != null &&
								request.auth.uid == resource.data.userId;
								// request.auth.token.email_verified == true;
			}

			function creatingJournalBelongsToUser() {
				return request.resource.data.userId == request.auth.uid;
			}

			function isJournal() {
				return 	request.resource.data.name is string &&
								request.resource.data.name.size() > 0 &&
								request.resource.data.kind in ['live', 'demo', 'backtest'] &&
								request.resource.data.currency is string &&
								request.resource.data.currency.size() == 3;
			}

			allow read: if journalBelongsToUser();
			allow create: if creatingJournalBelongsToUser();// && isJournal();
			allow update: if journalBelongsToUser() && creatingJournalBelongsToUser() &&// isJournal() &&
												request.resource.data.kind == resource.data.kind;
			allow delete: if journalBelongstoUser();
		}

		match /trades/{tradeId} {
			function tradeBelongsToUser() {
				return	request.auth.uid != null && 
								get(/databases/$(database)/documents/journals/$(resource.data.journalId)).data.userId == request.auth.uid;
								// request.auth.token.email_verified == true;
			}
			
			function creatingTradeBelongsToUser() {
				return get(/databases/$(database)/documents/journals/$(request.resource.data.journalId)).data.userId == request.auth.uid;
			}

			function isNumberString(num) {
				return (num is string && !math.isNaN(num)) || num == null;
			}

			function isOptionalType(field, type) {
				return	(type == 'string' && field is string) ||
								(type == 'bool' && field is bool) ||
								(type == 'list' && field is list) ||
								(type == 'timestamp' && field is timestamp) ||
								field == null;
			}

			function isTrade() {
				return	request.resource.data.journalId is string &&
								request.resource.data.created is timestamp &&
								request.resource.data.modified is timestamp &&
								request.resource.data.instrument is string;
								// isOptionalType(request.resource.data.strategy, 'string') &&
								// request.resource.data.kind in ['long', 'short', null] &&
								// isOptionalType(request.resource.data.entryDate, 'timestamp') &&
								// isNumberString(request.resource.data.entryPrice) &&
								// isNumberString(request.resource.data.positionSize) &&
								// isNumberString(request.resource.data.stopLoss) &&
								// isNumberString(request.resource.data.takeProfit) &&
								// isOptionalType(request.resource.data.exitDate, 'timestamp') &&
								// isNumberString(request.resource.data.exitPrice) &&
								// isNumberString(request.resource.data.fees) &&
								// isNumberString(request.resource.data.pl) &&
								// isOptionalType(request.resource.data.hitTakeProfit, 'bool') &&
								// isNumberString(request.resource.data.mfe) &&
								// isNumberString(request.resource.data.mae) &&
								// isOptionalType(request.resource.data.tags, 'list') &&
								// isOptionalType(request.resource.data.entryComment, 'string') &&
								// isOptionalType(request.resource.data.duringComment, 'string') &&
								// isOptionalType(request.resource.data.exitComment, 'string') &&
								// isOptionalType(request.resource.data.flag, 'bool') &&
								// isOptionalType(request.resource.data.entryEmotion, 'list') &&
								// isOptionalType(request.resource.data.exitEmotion, 'list') &&
								// request.resource.data.rating in [-1, 0, 1, null] &&
								// isOptionalType(request.resource.data.charts, 'list');
			}
			
			allow read: if tradeBelongsToUser();
			allow create: if creatingTradeBelongsToUser() && isTrade();
			allow update: if	tradeBelongsToUser() && creatingTradeBelongsToUser() && isTrade() &&
												resource.data.journalId == request.resource.data.journalId;
			allow delete: if tradeBelongsToUser();
		}
	}
}